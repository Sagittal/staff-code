import {BLANK, computeKeyPath, isUndefined, RecordKey, sort, Word} from "@sagittal/general"
import {Code, Unicode} from "../../../../../translate"
import {LIGHT_GREY} from "../../constants"
import {EMPTY_CODE_CELL} from "./constants"
import {
    ALIASES_ENTRIES,
    reorderAliasesSuchThatSagittalAsciiAliasesComeFirst,
    reorderAliasesSuchThatSagittalCommaNameAliasesComeFinal,
} from "./sagittal"

const UNICODES_ALIASES = ALIASES_ENTRIES.reduce(
    (
        unicodesAliases: Record<RecordKey<Unicode & Word>, Array<Code & Word>>,
        [code, unicode]: [Code & Word, Unicode & Word],
    ): Record<RecordKey<Unicode & Word>, Array<Code & Word>> => {
        if (isUndefined(unicodesAliases[unicode])) {
            unicodesAliases[unicode] = [] as Array<Code & Word>
        }

        const unicodeAliases = unicodesAliases[unicode]

        unicodeAliases.push(code)

        sort(unicodeAliases, {by: computeKeyPath("length")})

        reorderAliasesSuchThatSagittalAsciiAliasesComeFirst(unicodeAliases)
        reorderAliasesSuchThatSagittalCommaNameAliasesComeFinal(unicodeAliases)

        return unicodesAliases
    },
    {} as Record<RecordKey<Unicode & Word>, Array<Code & Word>>,
) as Record<RecordKey<Unicode & Word>, Array<Code & Word>>

const CODE_ALIASES_OVERRIDES: Record<RecordKey<Code & Word>, Array<Code & Word>> = {
    "nt2": ["nt2"] as Array<Code & Word>,
    "nt4": ["nt", "nt4"] as Array<Code & Word>,
}

const setupCodeCellWithOnlyTheAutoGeneratedCode = (codeCell: HTMLTableCellElement, code: Code & Word): void => {
    codeCell.textContent = code
    if (code === EMPTY_CODE_CELL) {
        codeCell.style.color = LIGHT_GREY
        codeCell.setAttribute("sc-code", BLANK)
    } else {
        codeCell.setAttribute("sc-code", code)
    }
}

const setupCodeCellWithOnlyTheAliases = (codeCell: HTMLTableCellElement, aliases: Array<Code & Word>): void => {
    aliases.forEach((alias: Code & Word, index: number): void => {
        const aliasSpan = document.createElement("span")
        aliasSpan.textContent = alias
        if (index !== 0) {
            aliasSpan.style.paddingLeft = "1em"
            aliasSpan.style.color = LIGHT_GREY
        }
        codeCell.appendChild(aliasSpan)
    })
    codeCell.setAttribute("sc-code", aliases[0])
}

const setupCodeCell = (codeCell: HTMLTableCellElement, unicode: Unicode & Word, code: Code & Word): void => {
    const aliases = CODE_ALIASES_OVERRIDES[code] || UNICODES_ALIASES[unicode]
    if (isUndefined(aliases)) {
        setupCodeCellWithOnlyTheAutoGeneratedCode(codeCell, code)
    } else {
        setupCodeCellWithOnlyTheAliases(codeCell, aliases)
    }
}

export {
    setupCodeCell,
}
